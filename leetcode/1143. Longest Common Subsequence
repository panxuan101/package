class Solution {
    int[][] memo;
    public int longestCommonSubsequence(String text1, String text2) {
        int m=text1.length(), n= text2.length();
        memo=new int[m][n];
        for(int[] row:memo){
            Arrays.fill(row,-1);
        }
        return helper(text1,0,text2,0);
    }
    private int helper(String text1, int i,String text2,int j){
        if(i==text1.length() || j==text2.length()) return 0;
        if(memo[i][j] !=-1) return memo[i][j];
        
        if(text1.charAt(i)==text2.charAt(j)){
            memo[i][j]=1+helper(text1,i+1,text2,j+1);
        }else{
            memo[i][j]=Math.max(helper(text1,i+1,text2,j),helper(text1,i,text2,j+1));
    }
        return memo[i][j];
      }
}

//ref: https://labuladong.gitbook.io/algo/dong-tai-gui-hua-xi-lie/1.2-zi-xu-lie-lei-xing-wen-ti/lcs


bottom up

class Solution {
    public int longestCommonSubsequence(String text1, String text2) {
        int m =text1.length(), n =text2.length();
        int[][] dp=new int[m + 1][n + 1];
        
        for(int i=1; i<=m; i++){
            for(int j=1; j<=n; j++){
                if(text1.charAt(i-1) == text2.charAt(j-1)){
                    dp[i][j]=1+dp[i-1][j-1];
                }else{
                    dp[i][j]=Math.max(dp[i][j-1],dp[i-1][j]);
                }
            }
        }
        return dp[m][n];
    }
}
