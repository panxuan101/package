class Solution {
    public int minCost(int[][] grid) {
    boolean[][] visited = new boolean[grid.length][grid[0].length];
    Deque<int[]> deque = new ArrayDeque<>();
    deque.add(new int[]{0,0,0});
    int[][] dirs = new int[][]{{0,1},{0,-1},{1,0},{-1,0}};
    int m = grid.length;
    int n = grid[0].length;
    while(!deque.isEmpty()) {
        int[] curr = deque.poll();
        
        int x = curr[0];
        int y = curr[1];
        int cost = curr[2];

        if (visited[x][y]) continue;
        visited[x][y] = true;
        if (x == m-1 && y == n-1) return cost;
        
        for(int i=0; i<=3; i++) {
            int dx = x + dirs[i][0];
            int dy = y + dirs[i][1];
            if (dx <0 || dx >= m || dy <0 || dy >= n) continue;
            if (i +1 == grid[x][y]) {
                deque.addFirst(new int[]{dx,dy,cost});
            } else {
                deque.addLast(new int[]{dx,dy,1+ cost});
            }
        }
    }
    return -1;
}
}
