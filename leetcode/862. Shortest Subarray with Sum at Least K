class Solution {
    public int shortestSubarray(int[] A, int K) {
        int res = Integer.MAX_VALUE;
        int[] sum = new int[A.length+1];
        for (int i = 1; i < sum.length; i++) {
            sum[i] = sum[i-1] + A[i-1];
        }
    
        Deque<Integer> deque = new LinkedList<>();
        for (int i = 0; i < sum.length; i++) {
            while (!deque.isEmpty() && sum[i] <= sum[deque.peekLast()])
                deque.pollLast();
            while (!deque.isEmpty() && sum[i] - sum[deque.peekFirst()] >= K)
                res = Math.min(res, i - deque.pollFirst());

            deque.addLast(i);
        }
        return res == Integer.MAX_VALUE ? -1 : res;
    }
}

//ref:https://leetcode.com/problems/shortest-subarray-with-sum-at-least-k/discuss/143726/C%2B%2BJavaPython-O(N)-Using-Deque
//ref:https://leetcode-cn.com/problems/shortest-subarray-with-sum-at-least-k/solution/qian-zhui-he-shuang-duan-dui-lie-si-lu-zai-dai-ma-/

