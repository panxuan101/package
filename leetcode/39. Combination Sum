class Solution {
    public List<List<Integer>> combinationSum(int[] candidates, int target) {
        List<List<Integer>> res = new ArrayList<>();
        dfs(candidates,target,res,new ArrayList<Integer>(),0);
        return res;
    }
    private void dfs(int[] candidates, int target, List<List<Integer>>res, List<Integer> subset,int index){
         if(target == 0){
            res.add(new ArrayList<Integer>(subset));
            return;
        }
        if(target < 0){
            return;
        }
       
        for(int i=index; i<candidates.length; i++){
            subset.add(candidates[i]);
            dfs(candidates,target-candidates[i],res,subset,i);
            subset.remove(subset.size() - 1);
        }
    }
}
