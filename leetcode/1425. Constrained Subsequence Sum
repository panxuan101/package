class Solution {
    public int constrainedSubsetSum(int[] nums, int k) {
        int n = nums.length;
        int res=Integer.MIN_VALUE;
        int[] dp=new int[n];
        Deque<Integer> deque=new ArrayDeque<>();
        
        for(int i=0; i<n; i++){
            while(!deque.isEmpty() && i-deque.getFirst() > k){
                deque.poll();
            }
             if(!deque.isEmpty()){
                 dp[i]=Math.max(0,dp[deque.getFirst()]);
             }
            dp[i] +=nums[i];
            res=Math.max(res,dp[i]);
            
            while(!deque.isEmpty() && dp[deque.getLast()]<=dp[i]){
                deque.pollLast();
            }
            deque.addLast(i);
        }
        return res;
    }
}
