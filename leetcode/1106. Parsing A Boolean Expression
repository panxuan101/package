class Solution {
    public boolean parseBoolExpr(String expression) {
        Stack<Character> stack= new Stack<>();
        for(int i=0; i< expression.length(); i++){
            char c=expression.charAt(i);
            if(c !=')')  stack.push(c);
            else{
                int t=0;
                int f=0;
                while(stack.peek() !='('){
                    char a=stack.pop();
                    if(a =='t'){
                        t++;
                    }else if(a == 'f'){
                        f++;
                    }
                }
                stack.pop();   // pop out '('
                char operator = stack.pop();
                if(operator == '!'){
                    stack.push(t > 0 ? 'f' : 't'); // !结果是反着来
                }else if(operator == '|'){
                    stack.push(t > 0 ? 't' : 'f');  //只要有t出现，则表达式为t
                }else if(operator == '&'){
                    stack.push(f > 0 ? 'f' : 't');  //只要有f出现，则&表达式为f
                }
            }
        }
        return stack.pop() == 't';
    }
}

//ref: https://leetcode.com/problems/parsing-a-boolean-expression/discuss/323532/JavaPython-3-Iterative-and-recursive-solutions-w-explanation-and-analysis.
//ref: https://leetcode-cn.com/problems/parsing-a-boolean-expression/solution/ti-gong-yi-tao-bi-jiao-jing-jian-de-javadai-ma-by-/
