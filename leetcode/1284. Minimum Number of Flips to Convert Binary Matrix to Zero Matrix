//没完全做出来，参考的一个老哥的答案，链接在底

class Solution {
    public int minFlips(int[][] mat) {
        int m=mat.length;
        int n=mat[0].length;
        int[][] cnt=new int[m][n];
        int bit=0, limit=(1<<n)-1;
        int res=10;
        while(bit<=limit){
            int temp=0;
            for(int i=0; i<m; i++){
                Arrays.fill(cnt[i],0);
            }
            for (int i = 0; i < n; i++) {
                if ((bit & (1 << i)) != 0) {
                    temp++;
                    cnt[0][i]++;
                    if (m > 1) {
                        cnt[1][i]++;
                    }
                }

                if (i - 1 >= 0 && (bit & (1 << (i - 1))) != 0) {
                    cnt[0][i]++;
                }
                if (i + 1 < n && (bit & (1 << (i + 1))) != 0) {
                    cnt[0][i]++;
                }
            }

            for (int i = 1; i < m; i++) {
                for (int j = 0; j < n; j++) {
                  
                    if (mat[i - 1][j] == 0 && cnt[i - 1][j] % 2 == 1 || mat[i - 1][j] == 1 && cnt[i - 1][j] % 2 == 0) {
                        cnt[i][j]++;
                        if (i + 1 < m) {
                            cnt[i + 1][j]++;
                        }
                        temp++;
                        if (j - 1 >= 0) {
                            cnt[i][j - 1]++;
                        }
                        if (j + 1 < n) {
                            cnt[i][j + 1]++;
                        }
                    }
                }
            }

            boolean flag = true;
            for (int i = 0; i < n; i++) {
                if (mat[m - 1][i] == 0 && cnt[m - 1][i] % 2 == 1 || mat[m - 1][i] == 1 && cnt[m - 1][i] % 2 == 0) {
                    flag = false;
                    break;
                }
            }
            if (flag) {
                res = Math.min(res, temp);
            }
            bit++;
        }
    
        if (res == 10) {
            return -1;
        } else {
            return res;
        }
    }
}

// ref：https://leetcode-cn.com/problems/minimum-number-of-flips-to-convert-binary-matrix-to-zero-matrix/solution/jian-dan-qing-xi-dfs-by-hlxing/

  
