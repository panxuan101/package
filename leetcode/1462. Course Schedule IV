class Solution {
    public List<Boolean> checkIfPrerequisite(int n, int[][] prerequisites, int[][] queries) {
      
        HashMap<Integer, HashSet<Integer>> map = new HashMap<>();
        for (int[] val : prerequisites) {
            HashSet<Integer> set = map.getOrDefault(val[0], new HashSet<>());
            set.add(val[1]);
            map.put(val[0], set);
        }

        HashSet<String> res = new HashSet<>();
        for (int i = 0; i < n; i++) {
            bfser(map, i, n, res);
        }
        List<Boolean> ans = new ArrayList<>();
        for (int[] val : queries) {
            ans.add(res.contains(val[0] + "_" + val[1]));
        }
        return ans;
    }

    private void bfser(HashMap<Integer, HashSet<Integer>> map, int i, int n, HashSet<String> res) {
        LinkedList<Integer> queue = new LinkedList<>();
        boolean[] visited = new boolean[n];
 
        if (!map.containsKey(i)) return;
        queue.offerLast(i);

        visited[i] = true;
        while (!queue.isEmpty()) {
            HashSet<Integer> data = map.get(queue.pollFirst());
            if (data != null) {
                for (Integer d : data) {
                    if (!visited[d]) {
                        res.add(i + "_" + d);
                        queue.offerLast(d);
                        visited[d] = true;
                    }
                }
            }
        }
    }
}

//refï¼šhttps://leetcode-cn.com/problems/course-schedule-iv/solution/ru-guo-bu-hui-floydye-ke-yi-yong-bfslai-shi-xian-b/
//ref:https://leetcode-cn.com/problems/course-schedule-iv/solution/ke-cheng-biao-san-jian-ke-fan-wai-pian-zhi-ke-chen/
