class Solution {
    public int minJumps(int[] arr) {
        if(arr.length ==1) return 0;
        Queue<Integer> queue=new LinkedList<>();
        boolean[] visited = new boolean[arr.length];
        int res=0;
        visited[0]=true;
        queue.offer(0);
        HashMap<Integer,LinkedList<Integer>> map=new HashMap<>();
        for(int i=0; i<arr.length; i++){
            LinkedList<Integer> list=map.getOrDefault(arr[i],new LinkedList<Integer>());
            list.add(i);
            map.put(arr[i],list);
        }
        while(!queue.isEmpty()){
            int size=queue.size();
            for(int i=0; i<size; i++){
                int cur=queue.poll();
                if(cur == arr.length - 1) return res;
                if(map.containsKey(arr[cur])){
                    for(int t : map.get(arr[cur])){
                        if(!visited[t]){
                            queue.offer(t);
                            visited[t]=true;
                        }
                    }
                    map.remove(arr[cur]);
                }
                if(cur + 1 < arr.length && !visited[cur+1]){
                    queue.offer(cur+1);
                    visited[cur+1]=true;
                }
                if(cur -1 >=0 && !visited[cur -1]){
                    queue.offer(cur -1);
                    visited[cur-1]=true;
                }
            }
            res++;
        }
        return res;
    }
}
