class Solution {
    public String removeKdigits(String num, int k) {
        //考虑全边界条件
        if(k==num.length()) return "0";
        Stack<Character> stack = new Stack<>();
        for(int i=0; i<num.length(); i++){
            while(k>0 && !stack.isEmpty() && stack.peek() > num.charAt(i)){
                stack.pop();
                k--;
            }
            stack.push(num.charAt(i));
        }
        // 特殊情况“1111”时
        while(k>0){
            stack.pop();
            k--;
        }
        //从stack里转出来
        StringBuilder sb=new StringBuilder();
        while(!stack.isEmpty()){
            sb.append(stack.pop());
        }
        sb.reverse();
        
        //特殊情况反转后开头的数字为0需要移除
        int res=0;
        while(res<sb.length() && sb.charAt(res) == '0'){
            res++;
        }
        return res == sb.length() ? "0" : sb.substring(res); // "0" 是会有特殊情况“num是"10"这样的情况
    }
}

//非常好的讲解：https://leetcode-cn.com/problems/remove-k-digits/solution/yi-zhao-chi-bian-li-kou-si-dao-ti-ma-ma-zai-ye-b-5/
