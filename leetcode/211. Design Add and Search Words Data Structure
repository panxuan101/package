class WordDictionary {
    
    private class Node {
        char value;
        Node[] children;
        boolean isWord = false;
        
        public Node(char value){
            this.value = value;
            this.children = new Node[26];
        }
    }
    Node[] root;

    /** Initialize your data structure here. */
    public WordDictionary() {
        this.root = new Node[26];
    }
    
    /** Adds a word into the data structure. */
    public void addWord(String word) {
        if(this.root[word.charAt(0) - 'a'] == null){
            this.root[word.charAt(0) - 'a'] = new Node(word.charAt(0));
        }
        Node itr = this.root[word.charAt(0) - 'a'];
        for(int i=1; i< word.length(); i++){
            if(itr.children[word.charAt(i) - 'a'] == null){
                itr.children[word.charAt(i) - 'a'] = new Node(word.charAt(i));
            }
           itr = itr.children[word.charAt(i) - 'a'];
        }
        itr.isWord = true;
    }
    
    /** Returns if the word is in the data structure. A word could contain the dot character '.' to represent any one letter. */
    public boolean search(String word) {
        return helper(this.root,word,0);
    }
    private boolean helper(Node[] root, String word, int start){
        if(start == word.length() - 1){
            if(word.charAt(start) == '.'){
                for(Node r : root){
                    if(r !=null && r.isWord){
                        return true;
                    }
                }
                return false;
            }
            return root[word.charAt(start) - 'a'] !=null && root[word.charAt(start) - 'a'].isWord;
        }
        if(word.charAt(start) == '.'){
                for(Node r : root){
                    if(r !=null && helper(r.children, word, start + 1)){
                        return true;
                    }
                }
            return false;
        }
        if(root[word.charAt(start) - 'a'] !=null){
            return helper(root[word.charAt(start) - 'a'].children, word, start + 1);
        }
        return false;
    }
}

/**
 * Your WordDictionary object will be instantiated and called as such:
 * WordDictionary obj = new WordDictionary();
 * obj.addWord(word);
 * boolean param_2 = obj.search(word);
 */
