class MinStack {
    //建一个stack存pop，push，top，再建一个辅助栈存min
    private Stack<Integer> stack;
    private Stack<Integer> min;

    /** initialize your data structure here. */
    public MinStack() {
        stack = new Stack<>();
        min = new Stack<>();
    }
    
    public void push(int x) {
        stack.push(x);
        if(min.isEmpty() || x<=min.peek()){
            min.push(x);
        }
    }
    
    public void pop() {
        int x=stack.pop();
        int y=min.peek();
        if(x == y){
        min.pop();
        }
        //if(stack.pop().equals(min.peek())){  // 先执行stack.pop(), 得到的返回值再去比较
         //  min.pop();
        //}
    }
    
    public int top() {
        return stack.peek();
    }
    
    public int getMin() {
        return min.peek();
    }
}

/**
 * Your MinStack object will be instantiated and called as such:
 * MinStack obj = new MinStack();
 * obj.push(x);
 * obj.pop();
 * int param_3 = obj.top();
 * int param_4 = obj.getMin();
 */
