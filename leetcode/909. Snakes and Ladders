class Solution {
    public int snakesAndLadders(int[][] board) {
        int n = board.length;
        Queue<Integer> queue = new LinkedList<>();
        queue.offer(1);
        boolean[] visited = new boolean[n * n + 1];
        int move=0;
        while(!queue.isEmpty()){
            int size = queue.size();
            for (int i=0; i<size; i++) {
                int cur = queue.poll();
                if (visited[cur]) continue;
                visited[cur] = true;
                if (cur == n * n) return move;
                for (int j=1; j<=6; j++) {
                    int num = cur + j;
                    if(num > n*n) break;
                    int r = n - (num - 1) / n-1;
                    int c = (n - r) % 2 !=0 ? (num -1)% n : n - (num - 1) % n -1 ;
                    if(board[r][c] == -1){
                        queue.offer(num);
                    }else{
                        queue.offer(board[r][c]);
                    }
                   
                }
            }
            move++;
        }
        return -1;
    }
    }
