class Solution {
    public String removeDuplicates(String s, int k) {
        Stack<Character> chStack = new Stack<>();
		Stack<Integer> numStack = new Stack<>();
		for (char ch : s.toCharArray()) {
			// 栈为空或者ch和栈顶元素不相同，入栈，并初始化连续出现数量为1
			if (chStack.isEmpty() || chStack.peek() != ch) {
				chStack.push(ch);
				numStack.push(1);
			} else if (chStack.peek() == ch) {
				// 字符栈顶元素已连续出现k-1次，且加上当前字符后满足连续k个，2个栈顶都出栈
				if (numStack.peek() + 1 == k) {
					numStack.pop();
					chStack.pop();
				} else {
					// 与字符栈顶元素相同但未满足k，计数栈栈顶加1
					numStack.push(numStack.pop() + 1);
				}
			}
		}
		StringBuilder sb = new StringBuilder();
		while (!numStack.isEmpty()) {
			int repeat = numStack.pop();
			char repeatCh = chStack.pop();
			for (int i = 0; i < repeat; i++) {
				sb.insert(0, repeatCh);
			}
		}
		return sb.toString();
    }
}

// ref: https://leetcode-cn.com/problems/remove-all-adjacent-duplicates-in-string-ii/solution/javachun-shu-zu-mo-ni-zhan-by-hteason/
