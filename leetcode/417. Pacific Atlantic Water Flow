class Solution {
    int[] dx ={1,0,-1,0};
    int[] dy ={0,1,0,-1};
    public List<List<Integer>> pacificAtlantic(int[][] matrix) {
        List<List<Integer>> res = new ArrayList<>();
        if(matrix.length==0 || matrix == null || matrix[0].length==0) return res;
        int m=matrix.length;
        int n=matrix[0].length;
        boolean[][] pac=new boolean[m][n];
        boolean[][] atl=new boolean[m][n];
        
        for(int i=0; i<m; i++){
            helper(matrix,pac,Integer.MIN_VALUE,i,0);//pac
            helper(matrix,atl,Integer.MIN_VALUE,i,n-1);//atl
        }
        for(int i=0; i<n; i++){
            helper(matrix,pac,Integer.MIN_VALUE,0,i);//pac
            helper(matrix,atl,Integer.MIN_VALUE,m-1,i);//atl
        }
        for(int i=0; i<m; i++){
            for(int j=0; j<n; j++){
                if(pac[i][j] && atl[i][j]){
                    List<Integer> temp=new ArrayList<>();
                    temp.addAll(Arrays.asList(i,j));
                    res.add(temp);
                }
            }
        }
        return res;
    }
    private void helper(int[][]matrix,boolean[][] visited, int height,int i, int j){ 
        int m=matrix.length;
        int n=matrix[0].length;
        if(i<0 || j < 0 || i>=m || j >= n || visited[i][j] || matrix[i][j] < height){
            return;
        }
        visited[i][j]=true;
        for(int k=0; k<4; k++){
            helper(matrix,visited,matrix[i][j],i+dx[k],j+dy[k]);
        }
    }
}
