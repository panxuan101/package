class Solution {
    public int minDistance(String word1, String word2) {
        /*insert: dp[i][j]=dp[i][j-1]+1;
          delete: dp[i][j]=dp[i-1][j-1]+1;
          replace:dp[i][j]=dp[i-1][j]+1;
          */
        int m= word1.length(), n=word2.length();
        int[][] dp= new int[m+1][n+1];
        
        for(int i=0; i<=m; i++){            //word2 为空
            dp[i][0]=i;
        }
        for(int i=0; i<=n; i++){           //word1 为空
            dp[0][i]=i;
        }
        for(int i=1; i<=m; i++){
            for(int j=1; j<=n; j++){
                if(word1.charAt(i-1) == word2.charAt(j-1)){   //不为空但相等时
                    dp[i][j]=dp[i-1][j-1];
                }else{                                      //不想等有insert/delete/replace
                    dp[i][j]=Math.min(Math.min(dp[i][j-1],dp[i-1][j]),dp[i-1][j-1]) + 1;
                }
            }
        }
        return dp[m][n];
    }
}
