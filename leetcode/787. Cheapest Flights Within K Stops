class Solution {
    public int findCheapestPrice(int n, int[][] flights, int src, int dst, int K) {
        //构图
        int[][] g=new int[n][n];
        for(int[] flight : flights){
            g[flight[0]][flight[1]]=flight[2];   //起点-终点-价格
        }
        PriorityQueue<int[]> pq=new PriorityQueue<>((a,b) -> a[0] -b[0]);
        pq.offer(new int[]{0,src,K+1});    //k+1 remainstops
        while(!pq.isEmpty()){
            int[] cur=pq.poll();
            int price=cur[0], place=cur[1],remainStops=cur[2];
            if(place == dst) return price;
            if(remainStops > 0){
                for(int i=0; i<n; i++){
                    if(g[place][i] > 0){
                        pq.offer(new int[]{price + g[place][i], i, remainStops -1});
                    }
                }
            }
            
        }
        return -1;
    }
}
