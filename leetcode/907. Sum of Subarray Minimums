class Solution {
    public int sumSubarrayMins(int[] arr) {
            Stack<Integer> stack = new Stack<>();
            int n = arr.length;
            int[] left = new int[n];
          
            for(int i = 0; i < n; i++){
                while(!stack.isEmpty() && arr[stack.peek()] > arr[i]){
                    stack.pop();
                }
                left[i] = stack.isEmpty() ? -1 : stack.peek();
                stack.push(i);
            }
            
            stack = new Stack<>();
            int[] right = new int[n];
           
            for(int i = n - 1; i >= 0; i--){
                while(!stack.isEmpty() && arr[stack.peek()] >= arr[i]){
                    stack.pop();
                }
                right[i] = stack.isEmpty() ? n : stack.peek();
                stack.push(i);
            }
            long res = 0;
            long mod = (long)1e9 + 7;
           
            for(int i = 0; i < n; i++){
                res += ((i - left[i]) * (right[i] - i) % mod * arr[i]) % mod;
                res %= mod;
            }
            return (int)res;
        }
    }
