class Solution {
    public List<List<Integer>> permuteUnique(int[] nums) {
        List<List<Integer>> res = new ArrayList<>();
        Arrays.sort(nums);
        boolean[] visited = new boolean[nums.length];
        dfs(nums,res, new ArrayList<Integer>(), visited);
        return res;
    }
    private void dfs(int[] nums, List<List<Integer>>res, List<Integer> subset, boolean[]visited){
        for(int i=0; i<nums.length; i++){
            if(visited[i]==true) continue;
            if(i>=1 && nums[i] == nums[i-1] && !visited[i-1]) continue;
            subset.add(nums[i]);
            visited[i] = true;
            dfs(nums, res, subset, visited);
            subset.remove(subset.size() - 1);
            visited[i] = false;
        }
        if(subset.size() == nums.length){
            res.add(new ArrayList<Integer>(subset));
            return;
        }
    }
}
