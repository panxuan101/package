class LRUCache {
    class Node{
        int key;
        int value;
        Node next;
        Node pre;
        public Node(int key,int value){
            this.key=key;
            this.value=value;
        }
    }
    private HashMap<Integer, Node> map;
    private int capacity;
    private Node head;
    private Node tail;  

    public LRUCache(int capacity) {
        map = new HashMap<>();
        this.capacity=capacity;
        head=null;
        tail=null;
    }
    
    public int get(int key) {
        Node node=map.get(key);
        if(node == null){
            return -1;
        }
        if(node !=tail){
                if(node == head){
                    head=head.next;
                }else{
                    node.pre.next = node.next;
                    node.next.pre = node.pre;
                }
                tail.next = node;
                node.pre =tail;
                node.next = null;
                tail =node;
            }
        return node.value;
    }
    
    public void put(int key, int value) {
        Node node=map.get(key); //查key是否存在，这一步是得到key
        if(node !=null){        //key存在，需要删掉
            node.value=value;
            if(node !=tail){
                if(node == head){
                    head=head.next;
                }else{
                    node.pre.next = node.next;
                    node.next.pre = node.pre;
                }
                tail.next = node;
                node.pre =tail;
                node.next = null;
                tail =node;
            }
        }else{                  //key不存在，可以将现在的（key,value）放入
            Node newNode = new Node(key,value);
            if(capacity==0){    //放入前需要测试capacity是否已满,满了要删除一个位置才能再放
                Node temp=head;
                head=head.next;
                map.remove(temp.key);
                capacity++;
            } 
            if(head==null && tail ==null){          //没有满的话可以放了，但是需要测试头部尾部是否为空
                head = newNode;
            }else{
                tail.next= newNode;
                newNode.pre=tail;
                newNode.next=null;
            }
            tail = newNode;
            map.put(key,newNode);
            capacity--;
        }
    }
}
