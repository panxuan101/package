class Solution {
    List<Integer> res = new ArrayList<>();
    int i=0;
    public List<Integer> flipMatchVoyage(TreeNode root, int[] voyage) {
        return dfs(root,voyage) ? res : List.of(-1);
    }
    public boolean dfs(TreeNode root, int[] voyage){
        if(root == null) return true;
        int restore = i;
        if(root.val !=voyage[i++]){
            return false;
        }
        if(dfs(root.left,voyage) && dfs(root.right,voyage)){
            return true;
        }
        i = restore + 1;
        boolean left = dfs(root.right,voyage);
        boolean right = dfs(root.left,voyage);
        if(left && right){
            res.add(root.val);
        }
        return left && right;
    }
}
