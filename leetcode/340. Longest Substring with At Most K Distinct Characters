class Solution {
    public int lengthOfLongestSubstringKDistinct(String s, int k) {
        int[] count =new int[256];
        int res=0;
        int j=0, number=0;
        for(int i=0; i<s.length(); i++){
            if(count[s.charAt(i)]++ == 0){              //先判断再++，不论结果是否为 true都会++
                number++;
            }
            if(number > k){                             //最多k个distinct->需要判断长度大于k时候
                while(--count[s.charAt(j++)] > 0);      //先--再判断再++
                number--; 
            }
            
            res=Math.max(res,i-j+1);
        }
        return res;
    }
}

//sliding window
//time:O(n)->sliding window , space:O(1)->256
class Solution {
    public int lengthOfLongestSubstringKDistinct(String s, int k) {
       HashMap<Character,Integer> map=new HashMap<>();
        int l=0, r=0;
        int res=0;
        while(r<s.length()){
            if(map.size() <= k){
                map.put(s.charAt(r),r);
                r++;
            }
            if(map.size() > k){            
                int rmv=s.length();
                for(int num : map.values()){
                    rmv=Math.min(rmv,num);
                }
                map.remove(s.charAt(rmv));
                l=rmv+1;
            }
            res=Math.max(res,r-l);
        }
        return res;
    }
} 
    
