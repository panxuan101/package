class Solution {
    public int minimumMoves(int[] arr) {
        int n = arr.length;
        int[][] dp = new int[n][n];
        
        for (int i=n-1; i >=0; i--) {
            for(int j=i; j<n; j++){
                if(i == j){
                    dp[i][j] = 1;           // 只有一个元素
        }else if(i== j - 1) {
                    dp[i][j] = arr[i] == arr[j] ? 1 : 2; // 2个元素
                }else{                          
                int s1=n,s2=n,s3=n;  // >3个元素
                if (arr[i] == arr[j]) {
                    s1= dp[i + 1][j - 1];
                }
                    s2=Math.min(dp[i+1][j],dp[i][j-1]) +1;
                for (int k =i+1; k < j-1; k++) {
                    s3= Math.min(s3, dp[i][k] + dp[k + 1][j]);
                }
                dp[i][j] =Math.min(s1,Math.min(s2,s3));
            }
        }
        }
        return dp[0][n - 1];
    }
}

//ref: http://element-ui.cn/article/show-156658.aspx
// ref: https://leetcode.com/problems/palindrome-removal/discuss/568619/Java-or-DP-solution-with-Comments
