class Solution {
    public int[] exclusiveTime(int n, List<String> logs) {
        int[] res=new int[n];
        Stack<Integer> stack=new Stack<>();
        int preTime=0;

        boolean  start=true;
        for (int i = 0; i <logs.size() ; i++) {
            String[] strings=logs.get(i).split(":");
            int channel=Integer.parseInt(strings[0]);
            int time=Integer.parseInt(strings[2]);

            if("start".equals(strings[1])){
                if(!stack.isEmpty()){
                    int endChannel=stack.peek();
                    res[endChannel]+=start?time-preTime:time-preTime-1;
                }
                stack.push(channel);
                start=true;
            }else {
                int endChannel=stack.pop();
                res[endChannel]+=start?time-preTime+1:time-preTime;
                start=false;
            }
            preTime=time;

        }
        return res;
    }
}

// ref:https://leetcode-cn.com/problems/exclusive-time-of-functions/solution/pan-duan-kai-shi-he-jie-shu-shi-fou-lian-zai-yi-qi/
