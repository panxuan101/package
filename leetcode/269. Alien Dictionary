class Solution {
    public String alienOrder(String[] words) {
       if(words == null || words.length == 0) return "";
       StringBuilder res = new StringBuilder();
        HashMap<Character,Set<Character>> map = new HashMap<>();
        int[] degree= new int[26]; //default is 0
        int count=0;
        //fill the array with degree
        for(String word:words){
            for(char c : word.toCharArray()){
                if(degree[c - 'a'] == 0){   //get the index not the value
                    count++;
                    degree[c - 'a'] = 1;
                }
            }
        }
        // 构建图
        for(int i=0; i<words.length -1; i++){
            char[] cur = words[i].toCharArray();
            char[] next = words[i+1].toCharArray();
            if(words[i].length() > words[i+1].length() && words[i].startsWith(words[i+1])){
              return "";
            }
            int len = Math.min(cur.length, next.length);
            for(int j=0; j<len; j++){
                if(cur[j] !=next[j]){
                    if(!map.containsKey(cur[j])){
                        map.put(cur[j], new HashSet<>());
                    }
                    if(map.get(cur[j]).add(next[j])){
                        degree[next[j] - 'a']++;
                    }
                    break;
                }
            }
        }
        Queue<Character> queue = new LinkedList<>();
        for(int i=0; i<26; i++){
            if(degree[i] ==1){
                queue.offer((char)('a' + i));
            }
        }
        while(!queue.isEmpty()){
            char c =queue.poll();
            res.append(c);
            if(map.containsKey(c)){
                for(char ch : map.get(c)){
                    if(--degree[ch - 'a'] == 1){
                        queue.offer(ch);
                    }
                }
            }
        }
        if(res.length() != count) return "";
        return res.toString();
    }
}
